# It turns out the gps coordinates were not recorded for some observations!
na_long  <- sum( is.na(data$gps_longitude) )
pacman::p_load(haven, sf, tidyverse, tmap, dplyr, maptiles)
data <- read_dta("/Users/michaelhall/Desktop/school/TZ data/TZ_cleaned_data/N_cluster_size.dta")
# It turns out the gps coordinates were not recorded for some observations!
na_long  <- sum( is.na(data$gps_longitude) )
na_lat   <- sum( is.na(data$gps_latitude) )
# Filter out NAs
data_clean <- data %>%
filter(
!is.na(gps_longitude),
!is.na(gps_latitude)
)
data_sf <- data_clean |>
st_as_sf(
coords = c("gps_longitude", "gps_latitude"),
crs    = 4326,
remove = FALSE
)
data_sf <- st_transform(data_sf, crs = 21037)
cluster_list <- st_is_within_distance(data_sf, data_sf, dist = 100)
# Subtract 1 to exclude the vendor themselves from the cluster
data_sf$cluster_100m <- lengths(cluster_list) - 1
cluster_list <- st_is_within_distance(data_sf, data_sf, dist = 50)
data_sf$cluster_50m <- lengths(cluster_list) - 1
cluster_list <- st_is_within_distance(data_sf, data_sf, dist = 20)
data_sf$cluster_20m <- lengths(cluster_list) - 1
# Check the names of columns and find the self-reported cluster size of SAME
# food vendors from 2024 (the same year of GPS coordinates)
colnames(data_sf)
# Check the class of the self-reported cluster size to ensure it is numeric
class(data_sf$cluster_size_samefood2024)
# Compare the two cluster measures
mean(data_sf$cluster_size_samefood2024 == data_sf$cluster_100m)
# They are different! Only 8.7 % of vendors reported the same number of adjacent
# vendors as the 100 meters' calculation.
# An exact number is a high bar. Let's see how many were within 4 vendors.
mean(
abs(data_sf$cluster_size_samefood2024 - data_sf$cluster_100m) <= 4,
na.rm = TRUE
)
# Much higher! 58 % of vendors reported a cluster size of vendors within 4 of
# the GPS calculation
# Now ttest to see on the average if the two are different
t.test(
x      = data_sf$cluster_size_samefood2024,
y      = data_sf$cluster_100m,
paired = TRUE,
alternative = "two.sided"
)
# The t-test suggest the two measures are not significantly different! This is
# great news as it will add robustness to using past measures of cluster size
# obtained via recall.
buffers_100 <- data_sf |>
st_buffer(dist = 100) |>
mutate(radius = 100, count = cluster_100m)
buffers_50 <- data_sf |>
st_buffer(dist = 50) |>
mutate(radius = 50, count = cluster_50m)
buffers_20 <- data_sf |>
st_buffer(dist = 20) |>
mutate(radius = 20, count = cluster_20m)
buffers_all <- bind_rows(buffers_20, buffers_50, buffers_100)
library(sf)
library(tmap)
# Compute 100Â m buffer around each point
buffers_100 <- st_buffer(data_sf, dist = 100)
# Count how many points fall in each buffer
counts <- lengths(st_intersects(buffers_100, data_sf))
buffers_100$cluster_size <- counts
# Plot with bubble size = cluster_size
tmap_mode("plot")
tm_basemap("OpenStreetMap") +
tm_shape(buffers_100) +
tm_bubbles(size = "cluster_size",
fill = "lightblue",
col = "darkblue",
lwd = 0.8,
fill_alpha = 0.3,
col_alpha = 0.5,
)    +
tm_layout(
frame         = FALSE,
inner.margins = c(0,0,0,0)
)
library(sf)
library(tmap)
# 1. Check data class and CRS
print(class(buffers_100))
print(st_crs(buffers_100))
# Transform it to WGS 84 to get it to display properly
buffers_100_ll <- st_transform(buffers_100, crs = 4326)
# 2. Switch to interactive mode
tmap_mode("view")
# 3. Plot again with bubble size = cluster size (and play with styling)
tm_tiles("OpenStreetMap") +
tm_shape(buffers_100_ll) +
tm_bubbles(size = "cluster_size",
fill = "red",
col = "darkred",
lwd = 1.2,
fill_alpha = 0.3,
col_alpha = 0.5
)
library(dplyr)
library(sf)
library(haven)
# 1. Drop the sf geometry
df <- data_sf %>%
st_drop_geometry()
# 2. Select only the ID and the cluster_ variables
df_sel <- df %>%
select(
___id,
library(dplyr)
library(sf)
library(haven)
# 1. Drop the sf geometry
df <- data_sf %>%
st_drop_geometry()
# 2. Select only the ID and the cluster_ variables
df_sel <- df %>%
select(
"___id",
starts_with("cluster_")
)
# 3. Write to Stata .dta
write_dta(df_sel, "/Users/michaelhall/Desktop/school/TZ_data/cluster_sizes_for_merge.dta")
write_dta(df_sel, "/Users/michaelhall/Desktop/school/TZ_data/TZ_cleaned_data/cluster_sizes_for_merge.dta")
write_dta(df_sel, "/Users/michaelhall/Desktop/school/TZ data/TZ_cleaned_data/cluster_sizes_for_merge.dta")
